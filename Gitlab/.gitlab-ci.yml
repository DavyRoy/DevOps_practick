image: node:18

stages:
  - build_app
  - test_app
  - deploy
  - notify

build_app:
  stage: build_app
  image: docker:24.0.7
  services:
    - docker:24.0.7-dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
  script:
    - docker build -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:latest"
  cache:
    paths:
      - node_modules/
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never

test_app:
  stage: test_app
  script:
    - npm run test -- --coverage
    - cp coverage/lcov-report/index.html coverage/index.html
  coverage: '/Coverage:\s(\d+\.\d+)%/'
  artifacts:
    paths:
      - coverage/index.html
    reports:
      junit: report.xml

deploy_staging:
  stage: deploy
  script:
    - echo "Deploy to STAGING"
  when: manual
  environment:
    name: staging
    url: https://staging.example.com
  only:
    - main

notify_success:
  stage: notify
  script:
    - |
      MESSAGE="✅ УСПЕХ%0AПроект: *${CI_PROJECT_NAME}*%0AВетка: *${CI_COMMIT_BRANCH}*%0A[Пайплайн](${CI_PIPELINE_URL})"
      curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
        -d chat_id="${TG_CHAT_ID}" \
        -d text="${MESSAGE}" \
        -d parse_mode=Markdown
  when: on_success
  allow_failure: false

notify_failure:
  stage: notify
  script:
    - |
      MESSAGE="❌ ОШИБКА%0AПроект: *${CI_PROJECT_NAME}*%0AВетка: *${CI_COMMIT_BRANCH}*%0A[Пайплайн](${CI_PIPELINE_URL})"
      curl -s -X POST "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
        -d chat_id="${TG_CHAT_ID}" \
        -d text="${MESSAGE}" \
        -d parse_mode=Markdown
  when: on_failure
  allow_failure: true
